<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý Xóa Mềm - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .sidebar {
            min-height: 100vh;
            background: #343a40;
        }
        .sidebar .nav-link {
            color: #adb5bd;
        }
        .sidebar .nav-link:hover,
        .sidebar .nav-link.active {
            color: #fff;
            background: #495057;
        }
        .main-content {
            background: #f8f9fa;
            min-height: 100vh;
        }
        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            border: 1px solid rgba(0, 0, 0, 0.125);
        }
        .table-responsive {
            border-radius: 0.375rem;
        }
        .btn-group-sm > .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        .loading {
            display: none;
        }
        .model-tab {
            cursor: pointer;
            transition: all 0.3s;
        }
        .model-tab:hover {
            background-color: #e9ecef;
        }
        .model-tab.active {
            background-color: #007bff;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse">
                <div class="position-sticky pt-3">
                    <h5 class="text-white mb-3">
                        <i class="fas fa-trash-restore me-2"></i>
                        Quản lý Xóa Mềm
                    </h5>
                    <ul class="nav flex-column" id="modelTabs">
                        <li class="nav-item">
                            <a class="nav-link model-tab active" data-model="products">
                                <i class="fas fa-box me-2"></i>Sản phẩm
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link model-tab" data-model="users">
                                <i class="fas fa-users me-2"></i>Người dùng
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link model-tab" data-model="categories">
                                <i class="fas fa-tags me-2"></i>Danh mục
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link model-tab" data-model="brands">
                                <i class="fas fa-trademark me-2"></i>Thương hiệu
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link model-tab" data-model="blogs">
                                <i class="fas fa-blog me-2"></i>Blog
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link model-tab" data-model="contacts">
                                <i class="fas fa-envelope me-2"></i>Liên hệ
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">
                        <i class="fas fa-trash-restore me-2"></i>
                        Quản lý <span id="currentModelName">Sản phẩm</span> đã xóa
                    </h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                        <div class="btn-group me-2">
                            <button type="button" class="btn btn-success" id="bulkRestoreBtn" disabled>
                                <i class="fas fa-undo me-1"></i>Khôi phục đã chọn
                            </button>
                            <button type="button" class="btn btn-danger" id="bulkDeleteBtn" disabled>
                                <i class="fas fa-trash me-1"></i>Xóa vĩnh viễn đã chọn
                            </button>
                        </div>
                        <button type="button" class="btn btn-primary" id="refreshBtn">
                            <i class="fas fa-sync-alt me-1"></i>Làm mới
                        </button>
                    </div>
                </div>

                <!-- Loading indicator -->
                <div class="loading text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                </div>

                <!-- Data table -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>
                                            <input type="checkbox" id="selectAll" class="form-check-input">
                                        </th>
                                        <th>ID</th>
                                        <th>Tên</th>
                                        <th>Ngày xóa</th>
                                        <th>Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody id="dataTableBody">
                                    <!-- Data will be loaded here -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <nav aria-label="Pagination">
                            <ul class="pagination justify-content-center" id="pagination">
                                <!-- Pagination will be generated here -->
                            </ul>
                        </nav>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Modals -->
    <!-- Confirm Restore Modal -->
    <div class="modal fade" id="confirmRestoreModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận khôi phục</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Bạn có chắc chắn muốn khôi phục item này không?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-success" id="confirmRestoreBtn">Khôi phục</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận xóa vĩnh viễn</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Cảnh báo:</strong> Hành động này không thể hoàn tác. Item sẽ bị xóa vĩnh viễn khỏi hệ thống.
                    </div>
                    Bạn có chắc chắn muốn xóa vĩnh viễn item này không?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa vĩnh viễn</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        class SoftDeleteManager {
            constructor() {
                this.currentModel = 'products';
                this.currentPage = 1;
                this.pageSize = 10;
                this.selectedItems = new Set();
                this.init();
            }

            init() {
                this.bindEvents();
                this.loadData();
            }

            bindEvents() {
                // Model tab switching
                document.querySelectorAll('.model-tab').forEach(tab => {
                    tab.addEventListener('click', (e) => {
                        e.preventDefault();
                        this.switchModel(e.target.dataset.model);
                    });
                });

                // Bulk actions
                document.getElementById('bulkRestoreBtn').addEventListener('click', () => {
                    this.bulkRestore();
                });

                document.getElementById('bulkDeleteBtn').addEventListener('click', () => {
                    this.bulkDelete();
                });

                // Refresh
                document.getElementById('refreshBtn').addEventListener('click', () => {
                    this.loadData();
                });

                // Select all checkbox
                document.getElementById('selectAll').addEventListener('change', (e) => {
                    this.toggleSelectAll(e.target.checked);
                });

                // Modal confirmations
                document.getElementById('confirmRestoreBtn').addEventListener('click', () => {
                    this.executeRestore();
                });

                document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
                    this.executeDelete();
                });
            }

            switchModel(model) {
                this.currentModel = model;
                this.currentPage = 1;
                this.selectedItems.clear();
                
                // Update UI
                document.querySelectorAll('.model-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[data-model="${model}"]`).classList.add('active');
                
                const modelNames = {
                    products: 'Sản phẩm',
                    users: 'Người dùng',
                    categories: 'Danh mục',
                    brands: 'Thương hiệu',
                    blogs: 'Blog',
                    contacts: 'Liên hệ'
                };
                document.getElementById('currentModelName').textContent = modelNames[model];
                
                this.loadData();
            }

            async loadData() {
                this.showLoading(true);
                try {
                    const response = await fetch(`/api/v1/soft-delete/${this.currentModel}?page=${this.currentPage}&limit=${this.pageSize}`, {
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        }
                    });
                    
                    if (!response.ok) throw new Error('Failed to load data');
                    
                    const result = await response.json();
                    this.renderTable(result.data.results);
                    this.renderPagination(result.data.meta);
                } catch (error) {
                    this.showError('Lỗi khi tải dữ liệu: ' + error.message);
                } finally {
                    this.showLoading(false);
                }
            }

            renderTable(items) {
                const tbody = document.getElementById('dataTableBody');
                tbody.innerHTML = '';

                if (items.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="5" class="text-center">Không có dữ liệu</td></tr>';
                    return;
                }

                items.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>
                            <input type="checkbox" class="form-check-input item-checkbox" value="${item._id}">
                        </td>
                        <td>${item._id}</td>
                        <td>${item.name || item.title || item.email || 'N/A'}</td>
                        <td>${new Date(item.deletedAt).toLocaleString('vi-VN')}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-success" onclick="softDeleteManager.restoreItem('${item._id}')">
                                    <i class="fas fa-undo"></i>
                                </button>
                                <button class="btn btn-danger" onclick="softDeleteManager.deleteItem('${item._id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                // Bind checkbox events
                document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        this.updateSelection();
                    });
                });
            }

            renderPagination(meta) {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                if (meta.pages <= 1) return;

                // Previous button
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${meta.current === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" onclick="softDeleteManager.goToPage(${meta.current - 1})">Trước</a>`;
                pagination.appendChild(prevLi);

                // Page numbers
                for (let i = 1; i <= meta.pages; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === meta.current ? 'active' : ''}`;
                    li.innerHTML = `<a class="page-link" href="#" onclick="softDeleteManager.goToPage(${i})">${i}</a>`;
                    pagination.appendChild(li);
                }

                // Next button
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${meta.current === meta.pages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" onclick="softDeleteManager.goToPage(${meta.current + 1})">Sau</a>`;
                pagination.appendChild(nextLi);
            }

            goToPage(page) {
                this.currentPage = page;
                this.loadData();
            }

            updateSelection() {
                this.selectedItems.clear();
                document.querySelectorAll('.item-checkbox:checked').forEach(checkbox => {
                    this.selectedItems.add(checkbox.value);
                });

                const hasSelection = this.selectedItems.size > 0;
                document.getElementById('bulkRestoreBtn').disabled = !hasSelection;
                document.getElementById('bulkDeleteBtn').disabled = !hasSelection;
            }

            toggleSelectAll(checked) {
                document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                    checkbox.checked = checked;
                });
                this.updateSelection();
            }

            restoreItem(id) {
                this.pendingAction = { type: 'restore', id };
                new bootstrap.Modal(document.getElementById('confirmRestoreModal')).show();
            }

            deleteItem(id) {
                this.pendingAction = { type: 'delete', id };
                new bootstrap.Modal(document.getElementById('confirmDeleteModal')).show();
            }

            bulkRestore() {
                this.pendingAction = { type: 'bulkRestore', ids: Array.from(this.selectedItems) };
                new bootstrap.Modal(document.getElementById('confirmRestoreModal')).show();
            }

            bulkDelete() {
                this.pendingAction = { type: 'bulkDelete', ids: Array.from(this.selectedItems) };
                new bootstrap.Modal(document.getElementById('confirmDeleteModal')).show();
            }

            async executeRestore() {
                try {
                    let response;
                    if (this.pendingAction.type === 'restore') {
                        response = await fetch(`/api/v1/soft-delete/${this.currentModel}/${this.pendingAction.id}/restore`, {
                            method: 'PATCH',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            }
                        });
                    } else {
                        response = await fetch(`/api/v1/soft-delete/${this.currentModel}/bulk/restore`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: JSON.stringify({ ids: this.pendingAction.ids })
                        });
                    }

                    if (!response.ok) throw new Error('Failed to restore');

                    this.showSuccess('Khôi phục thành công!');
                    this.loadData();
                    bootstrap.Modal.getInstance(document.getElementById('confirmRestoreModal')).hide();
                } catch (error) {
                    this.showError('Lỗi khi khôi phục: ' + error.message);
                }
            }

            async executeDelete() {
                try {
                    let response;
                    if (this.pendingAction.type === 'delete') {
                        response = await fetch(`/api/v1/soft-delete/${this.currentModel}/${this.pendingAction.id}/permanent`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            }
                        });
                    } else {
                        response = await fetch(`/api/v1/soft-delete/${this.currentModel}/bulk/permanent`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: JSON.stringify({ ids: this.pendingAction.ids })
                        });
                    }

                    if (!response.ok) throw new Error('Failed to delete');

                    this.showSuccess('Xóa vĩnh viễn thành công!');
                    this.loadData();
                    bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal')).hide();
                } catch (error) {
                    this.showError('Lỗi khi xóa: ' + error.message);
                }
            }

            showLoading(show) {
                document.querySelector('.loading').style.display = show ? 'block' : 'none';
            }

            showSuccess(message) {
                // You can implement toast notifications here
                alert(message);
            }

            showError(message) {
                // You can implement toast notifications here
                alert(message);
            }
        }

        // Initialize the manager
        const softDeleteManager = new SoftDeleteManager();
    </script>
</body>
</html>