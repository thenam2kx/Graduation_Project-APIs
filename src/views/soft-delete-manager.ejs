<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4f46e5;
            --secondary-color: #6366f1;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --dark-color: #1f2937;
            --light-bg: #f8fafc;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .main-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            margin: 20px;
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 700;
        }

        .header p {
            margin: 0.5rem 0 0 0;
            opacity: 0.9;
        }

        .stats-section {
            padding: 2rem;
            background: var(--light-bg);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .stat-card.active {
            background: var(--primary-color);
            color: white;
            transform: translateY(-5px);
        }

        .stat-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .content-section {
            padding: 2rem;
        }

        .controls {
            background: var(--light-bg);
            padding: 1.5rem;
            border-radius: 15px;
            margin-bottom: 2rem;
        }

        .btn-custom {
            border-radius: 10px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-primary-custom {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary-custom:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
        }

        .btn-success-custom {
            background: var(--success-color);
            color: white;
        }

        .btn-danger-custom {
            background: var(--danger-color);
            color: white;
        }

        .table-container {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .table {
            margin: 0;
        }

        .table thead {
            background: var(--dark-color);
            color: white;
        }

        .table tbody tr:hover {
            background: var(--light-bg);
        }

        .badge-custom {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-spinner {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
        }

        .pagination-custom .page-link {
            border-radius: 10px;
            margin: 0 2px;
            border: none;
            color: var(--primary-color);
        }

        .pagination-custom .page-item.active .page-link {
            background: var(--primary-color);
            border-color: var(--primary-color);
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #6b7280;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">ƒêang t·∫£i...</span>
            </div>
            <p class="mt-2 mb-0">ƒêang x·ª≠ l√Ω...</p>
        </div>
    </div>

    <div class="main-container">
        <!-- Header -->
        <div class="header">
            <h1><i class="fas fa-trash-restore"></i> <%= title %></h1>
            <p>Qu·∫£n l√Ω v√† kh√¥i ph·ª•c d·ªØ li·ªáu ƒë√£ x√≥a m·ªôt c√°ch an to√†n</p>
        </div>

        <!-- Stats Section -->
        <div class="stats-section">
            <h3><i class="fas fa-chart-bar"></i> T·ªïng quan d·ªØ li·ªáu ƒë√£ x√≥a</h3>
            <div class="stats-grid">
                <div class="stat-card active" data-model="products">
                    <div class="stat-icon">üì¶</div>
                    <div class="stat-number"><%= stats.products %></div>
                    <div class="stat-label">S·∫£n ph·∫©m</div>
                </div>
                <div class="stat-card" data-model="users">
                    <div class="stat-icon">üë•</div>
                    <div class="stat-number"><%= stats.users %></div>
                    <div class="stat-label">Ng∆∞·ªùi d√πng</div>
                </div>
                <div class="stat-card" data-model="categories">
                    <div class="stat-icon">üè∑Ô∏è</div>
                    <div class="stat-number"><%= stats.categories %></div>
                    <div class="stat-label">Danh m·ª•c</div>
                </div>
                <div class="stat-card" data-model="brands">
                    <div class="stat-icon">üè¢</div>
                    <div class="stat-number"><%= stats.brands %></div>
                    <div class="stat-label">Th∆∞∆°ng hi·ªáu</div>
                </div>
                <div class="stat-card" data-model="blogs">
                    <div class="stat-icon">üìù</div>
                    <div class="stat-number"><%= stats.blogs %></div>
                    <div class="stat-label">Blog</div>
                </div>
                <div class="stat-card" data-model="contacts">
                    <div class="stat-icon">üìß</div>
                    <div class="stat-number"><%= stats.contacts %></div>
                    <div class="stat-label">Li√™n h·ªá</div>
                </div>
            </div>
        </div>

        <!-- Content Section -->
        <div class="content-section">
            <!-- Controls -->
            <div class="controls">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h4 class="mb-0">
                            <span id="currentModelIcon">üì¶</span>
                            Qu·∫£n l√Ω <span id="currentModelName">S·∫£n ph·∫©m</span> ƒë√£ x√≥a
                        </h4>
                    </div>
                    <div class="col-md-6 text-end">
                        <button class="btn btn-success-custom btn-custom me-2" id="bulkRestoreBtn" disabled>
                            <i class="fas fa-undo"></i> Kh√¥i ph·ª•c ƒë√£ ch·ªçn (<span id="selectedCount">0</span>)
                        </button>
                        <button class="btn btn-danger-custom btn-custom me-2" id="bulkDeleteBtn" disabled>
                            <i class="fas fa-trash"></i> X√≥a vƒ©nh vi·ªÖn ƒë√£ ch·ªçn
                        </button>
                        <button class="btn btn-primary-custom btn-custom" id="refreshBtn">
                            <i class="fas fa-sync-alt"></i> L√†m m·ªõi
                        </button>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="table-container">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th width="50">
                                <input type="checkbox" class="form-check-input" id="selectAll">
                            </th>
                            <th>ID</th>
                            <th>T√™n</th>
                            <th>Ng√†y x√≥a</th>
                            <th width="200">Thao t√°c</th>
                        </tr>
                    </thead>
                    <tbody id="dataTableBody">
                        <!-- Data will be loaded here -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <nav class="mt-4" id="paginationContainer">
                <ul class="pagination pagination-custom justify-content-center" id="pagination">
                    <!-- Pagination will be generated here -->
                </ul>
            </nav>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>
    
    <script>
        class SoftDeleteManager {
            constructor() {
                this.currentModel = 'products'
                this.currentPage = 1
                this.pageSize = 10
                this.selectedItems = new Set()
                this.modelInfo = {
                    products: { icon: 'üì¶', name: 'S·∫£n ph·∫©m' },
                    users: { icon: 'üë•', name: 'Ng∆∞·ªùi d√πng' },
                    categories: { icon: 'üè∑Ô∏è', name: 'Danh m·ª•c' },
                    brands: { icon: 'üè¢', name: 'Th∆∞∆°ng hi·ªáu' },
                    blogs: { icon: 'üìù', name: 'Blog' },
                    contacts: { icon: 'üìß', name: 'Li√™n h·ªá' }
                }
                this.init()
            }

            init() {
                this.bindEvents()
                this.loadData()
            }

            bindEvents() {
                // Model switching
                document.querySelectorAll('.stat-card').forEach(card => {
                    card.addEventListener('click', (e) => {
                        const model = e.currentTarget.dataset.model
                        this.switchModel(model)
                    })
                })

                // Bulk actions
                document.getElementById('bulkRestoreBtn').addEventListener('click', () => {
                    this.bulkRestore()
                })

                document.getElementById('bulkDeleteBtn').addEventListener('click', () => {
                    this.bulkDelete()
                })

                // Refresh
                document.getElementById('refreshBtn').addEventListener('click', () => {
                    this.loadData()
                })

                // Select all
                document.getElementById('selectAll').addEventListener('change', (e) => {
                    this.toggleSelectAll(e.target.checked)
                })
            }

            switchModel(model) {
                this.currentModel = model
                this.currentPage = 1
                this.selectedItems.clear()
                
                // Update UI
                document.querySelectorAll('.stat-card').forEach(card => {
                    card.classList.remove('active')
                })
                document.querySelector(`[data-model="${model}"]`).classList.add('active')
                
                const info = this.modelInfo[model]
                document.getElementById('currentModelIcon').textContent = info.icon
                document.getElementById('currentModelName').textContent = info.name
                
                this.updateBulkButtons()
                this.loadData()
            }

            async loadData() {
                this.showLoading(true)
                try {
                    const token = localStorage.getItem('token') || 'dummy-token'
                    const response = await fetch(`/api/v1/soft-delete/${this.currentModel}?page=${this.currentPage}&limit=${this.pageSize}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    })
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
                    }
                    
                    const result = await response.json()
                    this.renderTable(result.data.results)
                    this.renderPagination(result.data.meta)
                } catch (error) {
                    console.error('Load data error:', error)
                    this.showError('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + error.message)
                    this.renderEmptyState()
                } finally {
                    this.showLoading(false)
                }
            }

            renderTable(items) {
                const tbody = document.getElementById('dataTableBody')
                
                if (!items || items.length === 0) {
                    this.renderEmptyState()
                    return
                }

                tbody.innerHTML = items.map(item => `
                    <tr>
                        <td>
                            <input type="checkbox" class="form-check-input item-checkbox" value="${item._id}">
                        </td>
                        <td>
                            <code>${item._id.substring(0, 8)}...</code>
                        </td>
                        <td>
                            <strong>${item.name || item.title || item.email || 'N/A'}</strong>
                        </td>
                        <td>
                            <span class="badge badge-custom bg-warning">
                                <i class="fas fa-clock"></i>
                                ${new Date(item.deletedAt).toLocaleString('vi-VN')}
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-success btn-sm me-1" onclick="softDeleteManager.restoreItem('${item._id}')">
                                <i class="fas fa-undo"></i> Kh√¥i ph·ª•c
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="softDeleteManager.deleteItem('${item._id}')">
                                <i class="fas fa-trash"></i> X√≥a vƒ©nh vi·ªÖn
                            </button>
                        </td>
                    </tr>
                `).join('')

                // Bind checkbox events
                document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        this.updateSelection()
                    })
                })
            }

            renderEmptyState() {
                const tbody = document.getElementById('dataTableBody')
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5">
                            <div class="empty-state">
                                <i class="fas fa-inbox"></i>
                                <h5>Kh√¥ng c√≥ d·ªØ li·ªáu</h5>
                                <p>Kh√¥ng c√≥ ${this.modelInfo[this.currentModel].name.toLowerCase()} n√†o ƒë√£ b·ªã x√≥a.</p>
                            </div>
                        </td>
                    </tr>
                `
                document.getElementById('paginationContainer').style.display = 'none'
            }

            renderPagination(meta) {
                const pagination = document.getElementById('pagination')
                
                if (meta.pages <= 1) {
                    document.getElementById('paginationContainer').style.display = 'none'
                    return
                }

                document.getElementById('paginationContainer').style.display = 'block'
                
                let html = ''
                
                // Previous
                html += `
                    <li class="page-item ${meta.current === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="softDeleteManager.goToPage(${meta.current - 1})">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `
                
                // Pages
                for (let i = 1; i <= meta.pages; i++) {
                    html += `
                        <li class="page-item ${i === meta.current ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="softDeleteManager.goToPage(${i})">${i}</a>
                        </li>
                    `
                }
                
                // Next
                html += `
                    <li class="page-item ${meta.current === meta.pages ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="softDeleteManager.goToPage(${meta.current + 1})">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `
                
                pagination.innerHTML = html
            }

            goToPage(page) {
                if (page < 1) return
                this.currentPage = page
                this.loadData()
            }

            updateSelection() {
                this.selectedItems.clear()
                document.querySelectorAll('.item-checkbox:checked').forEach(checkbox => {
                    this.selectedItems.add(checkbox.value)
                })
                this.updateBulkButtons()
            }

            updateBulkButtons() {
                const count = this.selectedItems.size
                document.getElementById('selectedCount').textContent = count
                document.getElementById('bulkRestoreBtn').disabled = count === 0
                document.getElementById('bulkDeleteBtn').disabled = count === 0
            }

            toggleSelectAll(checked) {
                document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                    checkbox.checked = checked
                })
                this.updateSelection()
            }

            async restoreItem(id) {
                const result = await Swal.fire({
                    title: 'X√°c nh·∫≠n kh√¥i ph·ª•c',
                    text: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√¥i ph·ª•c item n√†y?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Kh√¥i ph·ª•c',
                    cancelButtonText: 'H·ªßy',
                    confirmButtonColor: '#10b981'
                })

                if (result.isConfirmed) {
                    await this.executeRestore([id])
                }
            }

            async deleteItem(id) {
                const result = await Swal.fire({
                    title: 'C·∫£nh b√°o!',
                    text: 'H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn d·ªØ li·ªáu v√† kh√¥ng th·ªÉ ho√†n t√°c!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'X√≥a vƒ©nh vi·ªÖn',
                    cancelButtonText: 'H·ªßy',
                    confirmButtonColor: '#ef4444'
                })

                if (result.isConfirmed) {
                    await this.executeDelete([id])
                }
            }

            async bulkRestore() {
                if (this.selectedItems.size === 0) return

                const result = await Swal.fire({
                    title: 'Kh√¥i ph·ª•c h√†ng lo·∫°t',
                    text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√¥i ph·ª•c ${this.selectedItems.size} items?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Kh√¥i ph·ª•c t·∫•t c·∫£',
                    cancelButtonText: 'H·ªßy',
                    confirmButtonColor: '#10b981'
                })

                if (result.isConfirmed) {
                    await this.executeRestore(Array.from(this.selectedItems))
                }
            }

            async bulkDelete() {
                if (this.selectedItems.size === 0) return

                const result = await Swal.fire({
                    title: 'C·∫£nh b√°o nghi√™m tr·ªçng!',
                    html: `
                        <p>B·∫°n s·∫Øp x√≥a vƒ©nh vi·ªÖn <strong>${this.selectedItems.size}</strong> items!</p>
                        <p class="text-danger"><i class="fas fa-exclamation-triangle"></i> H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</p>
                    `,
                    icon: 'error',
                    showCancelButton: true,
                    confirmButtonText: 'X√≥a vƒ©nh vi·ªÖn',
                    cancelButtonText: 'H·ªßy',
                    confirmButtonColor: '#ef4444'
                })

                if (result.isConfirmed) {
                    await this.executeDelete(Array.from(this.selectedItems))
                }
            }

            async executeRestore(ids) {
                this.showLoading(true)
                try {
                    const token = localStorage.getItem('token') || 'dummy-token'
                    const endpoint = ids.length === 1 
                        ? `/api/v1/soft-delete/${this.currentModel}/${ids[0]}/restore`
                        : `/api/v1/soft-delete/${this.currentModel}/bulk/restore`
                    
                    const options = {
                        method: 'PATCH',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }

                    if (ids.length > 1) {
                        options.body = JSON.stringify({ ids })
                    }

                    const response = await fetch(endpoint, options)
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`)
                    }

                    this.showSuccess(`Kh√¥i ph·ª•c th√†nh c√¥ng ${ids.length} item(s)!`)
                    this.selectedItems.clear()
                    this.loadData()
                } catch (error) {
                    this.showError('L·ªói khi kh√¥i ph·ª•c: ' + error.message)
                } finally {
                    this.showLoading(false)
                }
            }

            async executeDelete(ids) {
                this.showLoading(true)
                try {
                    const token = localStorage.getItem('token') || 'dummy-token'
                    const endpoint = ids.length === 1 
                        ? `/api/v1/soft-delete/${this.currentModel}/${ids[0]}/permanent`
                        : `/api/v1/soft-delete/${this.currentModel}/bulk/permanent`
                    
                    const options = {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }

                    if (ids.length > 1) {
                        options.body = JSON.stringify({ ids })
                    }

                    const response = await fetch(endpoint, options)
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`)
                    }

                    this.showSuccess(`X√≥a vƒ©nh vi·ªÖn th√†nh c√¥ng ${ids.length} item(s)!`)
                    this.selectedItems.clear()
                    this.loadData()
                } catch (error) {
                    this.showError('L·ªói khi x√≥a vƒ©nh vi·ªÖn: ' + error.message)
                } finally {
                    this.showLoading(false)
                }
            }

            showLoading(show) {
                document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none'
            }

            showSuccess(message) {
                Swal.fire({
                    title: 'Th√†nh c√¥ng!',
                    text: message,
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                })
            }

            showError(message) {
                Swal.fire({
                    title: 'L·ªói!',
                    text: message,
                    icon: 'error',
                    confirmButtonText: 'ƒê√≥ng'
                })
            }
        }

        // Initialize
        const softDeleteManager = new SoftDeleteManager()
    </script>
</body>
</html>